{"ast":null,"code":"var _jsxFileName = \"C:\\\\MAMP\\\\htdocs\\\\EFP\\\\Exo-LPW\\\\lesson-efp\\\\lessons-efp\\\\LPW\\\\06_user-account\\\\frontend\\\\src\\\\components\\\\RedditFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RedditFeed(props) {\n  _s();\n  // Utilisation de la méthode useState pour stocker les données du feed\n  const [feedData, setFeedData] = useState([]);\n\n  // Comme on est suseptible d'attendre un moment avant l'arrivée des données que l'on a demandé\n  // j'aimerais afficher un loader\n  const [isLoading, setLoadingStatus] = useState(false);\n  const category = props.category || \"popular\";\n\n  // Utilisation de la méthode useEffect pour effectuer une requête GET sur l'API Reddit et mettre à jour les données du feed\n  useEffect(() => {\n    // Je set le loading a true\n    setLoadingStatus(true);\n\n    // Effectue une requête GET sur l'API Reddit\n    axios.get(`https://www.reddit.com/r/${category}.json`).then(response => {\n      // Met à jour les données du feed avec les données récupérées de l'API Reddit\n      setFeedData(response.data.data.children);\n\n      // Quand le les donnée sont passée dans \"feedData\" on stop le loading\n      setLoadingStatus(false);\n    }).catch(error => console.log(error));\n  }, [category]);\n  // Le tableau vide en deuxième argument indique que useEffect ne doit être exécuté qu'une seule fois lors du montage du composant\n\n  // Affichage des données du feed dans une liste\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sr-only\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: feedData.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://www.reddit.com${item.data.permalink}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: item.data.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, item.data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(RedditFeed, \"IEXcudpKHAaRh5GNw0ghmnsufQE=\");\n_c = RedditFeed;\nexport default RedditFeed;\nvar _c;\n$RefreshReg$(_c, \"RedditFeed\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","RedditFeed","props","_s","feedData","setFeedData","isLoading","setLoadingStatus","category","get","then","response","data","children","catch","error","console","log","className","role","fileName","_jsxFileName","lineNumber","columnNumber","map","item","href","permalink","target","rel","title","id","_c","$RefreshReg$"],"sources":["C:/MAMP/htdocs/EFP/Exo-LPW/lesson-efp/lessons-efp/LPW/06_user-account/frontend/src/components/RedditFeed.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction RedditFeed(props) {\r\n  // Utilisation de la méthode useState pour stocker les données du feed\r\n  const [feedData, setFeedData] = useState([]);\r\n\r\n  // Comme on est suseptible d'attendre un moment avant l'arrivée des données que l'on a demandé\r\n  // j'aimerais afficher un loader\r\n  const [isLoading, setLoadingStatus] = useState(false);\r\n\r\n  const category = props.category || \"popular\";\r\n\r\n  // Utilisation de la méthode useEffect pour effectuer une requête GET sur l'API Reddit et mettre à jour les données du feed\r\n  useEffect(() => {\r\n    // Je set le loading a true\r\n    setLoadingStatus(true);\r\n\r\n    // Effectue une requête GET sur l'API Reddit\r\n    axios\r\n      .get(`https://www.reddit.com/r/${category}.json`)\r\n      .then((response) => {\r\n        // Met à jour les données du feed avec les données récupérées de l'API Reddit\r\n        setFeedData(response.data.data.children);\r\n\r\n        // Quand le les donnée sont passée dans \"feedData\" on stop le loading\r\n        setLoadingStatus(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, [category]);\r\n  // Le tableau vide en deuxième argument indique que useEffect ne doit être exécuté qu'une seule fois lors du montage du composant\r\n\r\n  // Affichage des données du feed dans une liste\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      ) : (\r\n        <ul>\r\n          {feedData.map((item) => (\r\n            <li key={item.data.id}>\r\n              <a\r\n                href={`https://www.reddit.com${item.data.permalink}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                {item.data.title}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RedditFeed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA;EACA,MAAM,CAACW,SAAS,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMa,QAAQ,GAAGN,KAAK,CAACM,QAAQ,IAAI,SAAS;;EAE5C;EACAZ,SAAS,CAAC,MAAM;IACd;IACAW,gBAAgB,CAAC,IAAI,CAAC;;IAEtB;IACAT,KAAK,CACFW,GAAG,CAAE,4BAA2BD,QAAS,OAAM,CAAC,CAChDE,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACAN,WAAW,CAACM,QAAQ,CAACC,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC;;MAExC;MACAN,gBAAgB,CAAC,KAAK,CAAC;IACzB,CAAC,CAAC,CACDO,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACzC,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EACd;;EAEA;EACA,oBACER,OAAA;IAAAa,QAAA,EACGP,SAAS,gBACRN,OAAA;MAAKkB,SAAS,EAAC,gBAAgB;MAACC,IAAI,EAAC,QAAQ;MAAAN,QAAA,eAC3Cb,OAAA;QAAMkB,SAAS,EAAC,SAAS;QAAAL,QAAA,EAAC;MAAU;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAO;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACvC,gBAENvB,OAAA;MAAAa,QAAA,EACGT,QAAQ,CAACoB,GAAG,CAAEC,IAAI,iBACjBzB,OAAA;QAAAa,QAAA,eACEb,OAAA;UACE0B,IAAI,EAAG,yBAAwBD,IAAI,CAACb,IAAI,CAACe,SAAU,EAAE;UACrDC,MAAM,EAAC,QAAQ;UACfC,GAAG,EAAC,qBAAqB;UAAAhB,QAAA,EAExBY,IAAI,CAACb,IAAI,CAACkB;QAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACd,GAPGE,IAAI,CAACb,IAAI,CAACmB,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAStB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEL;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACpB,EAAA,CArDQF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAuDnB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}